package com.core.kubejselectrodynamics.block.wire;

import com.core.kubejselectrodynamics.util.builder.BlockBuilderUtil;
import dev.latvian.mods.kubejs.registry.RegistryInfo;
import dev.latvian.mods.kubejs.util.UtilsJS;
import electrodynamics.common.block.subtype.SubtypeWire;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;

public class BlockWireMainBuilder extends BlockWireBuilder {
    public BlockWireMainBuilder(ResourceLocation location) {
        super(location, SubtypeWire.WireColor.NONE, SubtypeWire.WireClass.BARE);
    }

    @Override
    public void createAdditionalObjects() {
        for (SubtypeWire.WireColor wireColor : SubtypeWire.WireColor.values()) {
            if (invalidColor(wireColor)) {
                continue;
            }

            for (SubtypeWire.WireClass wireClass : SubtypeWire.WireClass.values()) {
                if (mainConfiguration(wireClass)) {
                    continue;
                }

                ResourceLocation newID = newID("", BlockBuilderUtil.getSerializedName(wireClass) + BlockBuilderUtil.getSerializedName(wireColor));
                BlockWireBuilder builder = new BlockWireBuilder(this, newID, wireColor, wireClass);
                if (hasBaseTexture()) {
                    builder.wireTint(getWireTint().r(), getWireTint().g(), getWireTint().b(), getWireTint().a());
                }
                BlockBuilderUtil.copyProperties(this, builder);
                RegistryInfo.BLOCK.addBuilder(builder);
                builder.createAdditionalObjects();
                if (displayName != null) {
                    builder.displayName(formatSubtypeName(displayName.getString(), wireColor, wireClass));
                }else {
                    builder.displayName(formatSubtypeName(UtilsJS.snakeCaseToTitleCase(id.getPath()), wireColor, wireClass));
                }
            }
        }

        if (itemBuilder != null) {
            RegistryInfo.ITEM.addBuilder(itemBuilder);
        }
    }

    // This configuration will be generated by the current, main builder,
    // so we won't bother dispatching a new builder for it
    private static boolean mainConfiguration(SubtypeWire.WireClass wireClass) {
        return wireClass == SubtypeWire.WireClass.BARE;
    }

    // In the context of colored blocks, "none" makes no sense
    private static boolean invalidColor(SubtypeWire.WireColor wireColor) {
        return wireColor == SubtypeWire.WireColor.NONE;
    }

    private static Component formatSubtypeName(String main, SubtypeWire.WireColor wireColor, SubtypeWire.WireClass wireClass) {
        String classPrefix = UtilsJS.snakeCaseToTitleCase(BlockBuilderUtil.getSerializedName(wireClass));
        String colorPostfix = UtilsJS.snakeCaseToTitleCase(BlockBuilderUtil.getSerializedName(wireColor));
        return Component.literal(String.format("%s %s (%s)", classPrefix, main, colorPostfix));
    }
}
